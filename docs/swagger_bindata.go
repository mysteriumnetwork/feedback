// Code generated for package docs by go-bindata DO NOT EDIT. (@generated)
// sources:
// swagger.json
package docs

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xcb\x72\xdb\x36\x17\xde\xfb\x29\xce\xe0\xff\x97\xb1\x28\x3b\xed\xa2\xde\xa5\xca\xa5\x9a\x69\x3a\x9a\x8e\xbb\x6a\xb3\x80\xc9\x23\x12\x31\x09\xa0\x07\x80\x14\x8d\xc7\xef\xde\x01\x48\x4a\xbc\x5a\xb6\xa2\x2a\x4e\x93\x9d\x84\x73\xd1\x87\xef\x5c\x0d\xdf\x9d\x01\xb0\x58\x49\xe3\x0a\x34\xec\x0a\xfe\x3c\x03\x00\x60\x5c\xeb\x5c\xc4\xdc\x0a\x25\xa3\x8f\x46\x49\x76\x06\xf0\xe1\x85\xd7\xd5\xa4\x12\x17\x3f\x4e\xd7\xc4\x19\xb6\xdc\x66\xd6\x6a\xd3\x90\xaf\x79\x9a\x22\xb1\x2b\x60\x97\x93\x29\x0b\x67\x42\x2e\x15\xbb\x82\xbb\xd2\x20\x41\x13\x93\xd0\xde\xb7\xd7\xba\xce\x10\xb4\x23\xad\x0c\x82\x5a\x82\xcd\x84\x81\x44\xc5\xae\x40\x69\x03\x00\x10\x06\xac\x02\x4d\x6a\x25\x12\x84\x04\x57\x98\x2b\x8d\x64\x80\x4b\x10\xd2\x88\x34\xb3\xde\x32\x53\x6b\xb0\xea\x2f\x29\xa4\x45\xe2\xb1\x85\xb5\xb0\x19\xbc\xdf\x18\x8b\x24\x5c\x01\x6f\x11\x93\x1b\x1e\xdf\xc2\xab\xc5\x3c\xe0\x02\x60\x56\xd8\x1c\x3d\x8a\x21\x61\x2e\x62\x94\x06\xb7\xc8\x01\x98\xe4\x45\x50\x7f\xb7\xf8\x75\xf5\xb2\xd2\x03\x60\x8e\x72\x7f\x1a\xa8\xb8\x8a\xa2\xf5\x7a\x3d\x49\xa5\x9b\x28\x4a\xa3\xca\x89\x89\x52\x9d\x9f\xbf\x9c\x4c\x27\x99\x2d\x72\x16\x0c\xef\xab\xdf\x59\x21\x99\x8a\x8c\xe9\x64\x3a\xb9\xf0\xd2\x20\x63\x99\x32\xd6\x1f\xe7\x2a\xe6\x79\xf8\x12\x8e\x6f\xb8\xc1\x05\xb7\x99\x17\x45\x5c\x8b\x68\x75\x51\x0a\x34\xb7\x99\xd9\x31\x1d\xa5\xc2\x66\xee\xa6\x79\x01\x5d\x7a\xac\xbf\xf7\xc3\x71\x01\x84\x7f\x3b\x34\x16\x34\x12\x14\x42\x3a\x8b\x3e\x02\x3c\xcf\xd5\x1a\x93\xed\x9d\x87\x52\xac\x3a\x2f\x5c\x6e\x85\xe6\x64\xa3\xa5\xa2\xe2\x3c\xe1\x96\xb3\xad\xfc\x43\xc3\x41\x2f\xef\xaa\xf3\xa1\xec\xeb\x5b\x1b\x57\x14\x9c\x36\x1e\xf4\x8c\x90\x5b\x34\xc0\x41\xe2\x1a\xde\x85\x5b\x83\x30\xc6\x61\x99\x04\xce\x20\x01\xa1\x56\x64\x9b\x17\xf0\x59\x14\x7e\x65\x9e\x78\x2f\x71\xf0\x52\x5a\xcf\xbd\x71\x53\x57\x73\xe2\x05\x5a\xa4\x2e\xda\xbb\xc6\x67\x9f\x51\x1b\x1d\x32\xc4\x58\x12\x32\x6d\x78\x08\xd2\x4f\xe7\xa9\x3a\xaf\x93\xe8\x0f\x83\x34\x4f\xba\x2a\xb5\xd4\x0d\x4a\x45\x08\x92\xe7\xf5\xb5\xa7\xb5\x23\xf5\xa1\x13\x84\xfe\x36\x96\x1c\x36\x84\xf7\x2f\x8e\x02\xf9\x75\x23\x59\x46\x70\x27\xe3\x2a\x5f\x18\xfc\x9b\x82\x8b\x7c\x0c\x36\x0e\x09\x3b\x80\x9f\x08\x69\x29\x72\x7c\x10\xd0\xdb\x01\x85\x5a\x36\x64\x7c\x30\x7f\x83\xf5\x43\x68\xb4\xf2\xad\xa9\xd5\x0f\x00\xd8\xe5\x74\xda\x39\xea\xb7\x89\x50\x1f\x50\x56\x4c\x02\x42\x56\x45\xd7\xc5\x14\xa6\x05\xef\x79\x03\x60\xff\x27\x5c\x7a\x47\xff\x8b\x12\x5c\x0a\x29\xbc\x63\x13\xcd\xba\x25\xf8\x7b\x05\x92\xb5\xec\xef\xc7\x22\xc1\x7e\x78\x04\xf6\x9f\x79\x52\x37\xb9\xcf\xc5\xfb\x6a\x31\x7f\x43\xa4\xe8\xc9\x30\x2f\x7f\xda\x0b\xf3\x5a\x29\x28\xb8\xdc\xd4\x58\xcd\x68\xfe\xb1\x1f\x1f\x13\x31\x3f\x16\x25\xcf\xc1\x20\xad\x90\x00\x3d\xee\x13\xde\xff\xac\xfb\xe9\xbe\x35\x04\xa3\x30\xb6\x63\x55\x7c\x6b\xd3\x6a\x5e\xdd\x1b\xe2\x8c\x57\x3b\x8b\xcd\xf0\xd0\xe9\x55\x7b\xfb\x4a\xe6\xd7\xf1\x9b\xfc\x6f\x2a\xc1\x79\x82\xd2\x0a\xbb\x19\x83\x26\x1f\xd0\xf9\xc2\x33\xca\x73\x7a\xed\xd5\x1f\x60\x75\x48\x7e\x12\x5e\x67\xca\x49\x4b\x0f\xd2\x3a\xa2\xf2\xaf\xc3\x9b\xeb\x87\x58\x13\x83\xd2\x13\x80\x1a\x07\x74\x72\x30\xdf\x57\xb7\x27\x40\xfa\x2f\xaf\x6e\x33\x3f\x67\x1a\x9b\x5b\x3d\x32\x8e\xb3\xbb\xb5\x06\xd0\xf7\xed\xed\x5b\xd9\xde\xb4\xaf\xe0\xc6\xe6\x96\x62\x67\x71\x6b\xec\x3f\xe5\xcf\x25\xe5\xab\x4e\xbb\xf2\xbb\x4b\x4d\x57\xfc\x59\x89\xbf\x10\x32\x05\xe3\xe2\x18\x8d\x59\xba\x5e\xc7\x78\x2a\x7b\xde\xdd\x01\x8c\x6d\x1f\x77\x1a\xbe\x76\x4f\x36\x75\x48\x9a\x5c\x76\xae\x51\xab\xf8\x95\x90\xd0\xa0\xb4\x7e\x95\x34\x42\xa6\x39\x96\x79\xe1\xab\x9a\x4b\xe8\x85\x77\xfb\x5e\x55\xb7\x39\x75\xf3\x11\xe3\x5d\x19\xf9\x15\x57\x23\x59\xd1\xe1\x97\xcd\xb8\x6b\xbd\x83\xc1\x40\xfb\xde\xdd\xb7\x11\xaf\x02\x8d\xe1\xe9\x3e\xd3\x56\x35\xb4\xda\xec\xfb\xca\xbe\x4f\xe6\x16\x73\xd0\xd7\x3c\xbe\x2d\x7f\x87\x95\x6f\x5e\x93\x58\x15\x51\x51\xbf\xfd\x49\xb4\x6b\x45\xb7\xd1\xb2\x7a\xe5\x8b\x84\x5c\x12\x8f\xb8\x16\x65\x1d\xb5\x72\xb9\x47\xdb\xfe\x50\xd4\xaa\xbb\x90\xc0\x2f\xd7\xd7\x8b\x2a\x1a\x9a\x6f\x72\xc5\x93\xc3\xe9\x0f\x6e\x7a\x29\x5f\x7b\xe1\x44\xbc\xbd\x70\x31\x61\xb1\xe8\xea\xef\xed\x02\xe3\x0d\xaa\x3d\x8a\x4b\x30\xa7\x8c\xc8\xf8\xab\xc0\x78\x68\x46\x6d\x3a\x65\xb3\x6d\x07\x90\x36\x9f\x0d\xc3\x7c\x6c\xee\x41\x4f\x0e\x5a\xf0\x13\xba\xd8\x61\xa9\x3f\xaf\xec\x8f\x4d\x74\xfd\x61\x88\xe2\xe1\xe1\xbd\x8f\xe4\x41\xab\x51\x9a\xeb\xbf\xf3\x8f\x46\x74\xac\xe4\x0a\xc9\xec\xa6\xc6\x61\x7c\xcf\xda\x6e\x4e\x43\xfb\xbe\x5e\xff\xb8\x46\x7f\xa4\x2e\xff\x5c\x9b\x75\x9c\x0b\x94\x76\x80\xb8\x47\x64\xe8\xd7\xdf\x9e\x9f\x41\x6f\x1e\x0a\xc0\xa2\xb3\xf0\x0d\xed\x5a\x8d\xbc\xd5\xe5\xf7\xe7\x92\xa2\x2d\x0d\xfc\xc4\x0b\x5d\xfe\x1b\x50\xab\xd6\x26\x73\xc4\xd1\xc6\x76\xdb\xdf\xd9\xfd\x3f\x01\x00\x00\xff\xff\x6c\x6d\xcc\xca\xa2\x1d\x00\x00")

func swaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerJson,
		"swagger.json",
	)
}

func swaggerJson() (*asset, error) {
	bytes, err := swaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger.json", size: 7586, mode: os.FileMode(436), modTime: time.Unix(1643193737, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger.json": swaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"swagger.json": &bintree{swaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
