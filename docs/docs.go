// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "https://docs.mysterium.network/en/latest/about/terms-and-conditions/",
        "contact": {
            "name": "API Support",
            "url": "https://github.com/mysteriumnetwork/feedback/issues"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/bug-report": {
            "post": {
                "tags": [
                    "bug-report"
                ],
                "summary": "create a new bug report",
                "parameters": [
                    {
                        "minLength": 30,
                        "type": "string",
                        "name": "description",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "0xF0345F6251Bef9447A08766b9DA2B07b28aD80B0",
                        "name": "nodeIdentity",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "log file",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/feedback.CreateBugReportResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apierror.APIErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apierror.APIErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/intercom": {
            "post": {
                "tags": [
                    "bug-report"
                ],
                "summary": "create a new bug in intercom",
                "deprecated": true,
                "parameters": [
                    {
                        "minLength": 30,
                        "type": "string",
                        "name": "description",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "ip",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "name": "ipType",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "name": "nodeCountry",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "name": "nodeIdentity",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "userId",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "name": "userType",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "log file",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/feedback.CreateIntercomIssueResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apierror.APIErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apierror.APIErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/ping": {
            "get": {
                "description": "Endpoint is meant to check service health and returns pong response for every request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Check service health",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.Ping"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "apierror.APIError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "apierror.APIErrorResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apierror.APIError"
                    }
                }
            }
        },
        "feedback.CreateBugReportResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "issueId": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "node_identity": {
                    "type": "string"
                }
            }
        },
        "feedback.CreateIntercomIssueResponse": {
            "type": "object",
            "properties": {
                "conversationId": {
                    "type": "string"
                }
            }
        },
        "infra.Ping": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "example: pong",
                    "type": "string"
                }
            }
        },
        "multipart.FileHeader": {
            "type": "object",
            "properties": {
                "filename": {
                    "type": "string"
                },
                "header": {
                    "$ref": "#/definitions/textproto.MIMEHeader"
                },
                "size": {
                    "type": "integer"
                }
            }
        },
        "textproto.MIMEHeader": {
            "type": "object",
            "additionalProperties": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Feedback",
	Description:      "This is a service dedicated to collecting feedback from Mysterium Network users",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
